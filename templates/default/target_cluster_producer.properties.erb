# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.producer.ProducerConfig for more details

############################# Producer Basics #############################

# list of brokers used for bootstrapping knowledge about the rest of the cluster
# format: host1:port1,host2:port2 ...
<%= render 'partials/option.erb', :variables => {:key => 'metadata.broker.list', :value => @options[:metadata_broker_list]} -%>

# name of the partitioner class for partitioning events; default partition spreads data randomly
<%= render 'partials/option.erb', :variables => {:key => 'partitioner.class', :value => @options[:partitioner_class]} -%>

# specifies whether the messages are sent asynchronously (async) or synchronously (sync)
<%= render 'partials/option.erb', :variables => {:key => 'producer.type', :value => @options[:producer_type]} -%>

# specify the compression codec for all data generated: none , gzip, snappy.
# the old config values work as well: 0, 1, 2 for none, gzip, snappy, respectivally
<%= render 'partials/option.erb', :variables => {:key => 'compression.codec', :value => @options[:compression_codec]} -%>

# message encoder
<%= render 'partials/option.erb', :variables => {:key => 'serializer.class', :value => @options[:serializer_class]} -%>

# allow topic level compression
<%= render 'partials/option.erb', :variables => {:key => 'compressed.topics', :value => @options[:compressed_topics]} -%>

############################# Async Producer #############################
# maximum time, in milliseconds, for buffering data on the producer queue
<%= render 'partials/option.erb', :variables => {:key => 'queue.buffering.max.ms', :value => @options[:queue_buffering_max_ms]} -%>

# the maximum size of the blocking queue for buffering on the producer
<%= render 'partials/option.erb', :variables => {:key => 'queue.buffering.max.messages', :value => @options[:queue_buffering_max_messages]} -%>

# Timeout for event enqueue:
# 0: events will be enqueued immediately or dropped if the queue is full
# -ve: enqueue will block indefinitely if the queue is full
# +ve: enqueue will block up to this many milliseconds if the queue is full
<%= render 'partials/option.erb', :variables => {:key => 'queue.enqueue.timeout.ms', :value => @options[:queue_enqueue_timeout_ms]} -%>

# the number of messages batched at the producer
<%= render 'partials/option.erb', :variables => {:key => 'batch.num.messages', :value => @options[:batch_num_messages]} -%>
